		---SQL----



SELECT * 
FROM movies;

SELECT name, title
FROM movies;

SELECT * 
FROM movies 
WHERE year > 2014;//=, >=, <


SELECT DISTINCT name 
FROM movies;

// getting characters that are almost alike

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';// could be seven or se7en.they but match the discription.
// 'se' and 'en' while dis '_' could be anything


// This statement below filters the result set to only include movies with names that begin with the letter ‘A’:
// % is a wildcard character that matches zero or more missing letters in the pattern. For example:
// A% matches all movies with names that begin with letter ‘A’


   SELECT * 
   FROM movies
   WHERE name LIKE 'A%';


// IS NULL or IS NOT NULL
      SELECT name
      FROM movies 
      WHERE imdb_rating IS NULL;



// BETWEEN OPERATOR

	SELECT *
	FROM movies
	WHERE year BETWEEN 1970 AND 1979;

// AND OPERATOR

	SELECT * 
	FROM movies
	WHERE year BETWEEN 1990 AND 1999
        AND genre = 'romance';

	///
   SELECT *
   FROM movies
   WHERE year < 1985
   AND genre = 'horror';


// OR OPERATOR

	SELECT *
	FROM movies
	WHERE genre = 'romance'
   	OR genre = 'comedy';

// ORDER BY

	SELECT name, year
	FROM movies
	ORDER BY name;

// LIMIT 

	SELECT * FROM movies 
	ORDER BY imdb_rating DESC 
	LIMIT 3;


// CASE 
	SELECT name,
 CASE
  WHEN review > 4.5 THEN 'Extraordinary'
  WHEN review > 4 THEN 'Excellent'
  WHEN review > 3 THEN 'Good'
  WHEN review > 2 THEN 'Fair'
  ELSE 'Poor'
 END AS 'Review'
FROM nomnom;




// REVIEW
    SELECT is the clause we use every time we want to query information from a database.
AS renames a column or table.
DISTINCT return unique values.
WHERE is a popular command that lets you filter the results of the query based on conditions that you specify.
LIKE and BETWEEN are special operators.
AND and OR combines multiple conditions.
ORDER BY sorts the result.
LIMIT specifies the maximum number of rows that the query will return.
CASE creates different outputs.


/// SQLITE SYNTAX
	
	===create table ====
	CREATE TABLE celebs (
        id INTEGER, 
   	name TEXT, 
  	age INTEGER
	); 


        ==== filling the table column
	INSERT INTO celebs (id, name, age) 
	VALUES (1, 'Justin Bieber', 22);

=== edit/add new column table
	ALTER TABLE celebs 
ADD COLUMN twitter_handle TEXT;


====update table==
	UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4; 

2): UPDATE celebs 
SET name = 'justin timberlain'
WHERE id = 1;



====DELETE 
	DELETE FROM celebs 
WHERE twitter_handle IS NULL;



======CONSTRAINT / RESTRICTIONAL DATA TYPE
	CREATE TABLE awards (
   id INTEGER PRIMARY KEY,
   recipient TEXT NOT NULL,
   award_name TEXT DEFAULT 'Grammy'
);
